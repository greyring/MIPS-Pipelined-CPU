////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : MUL_ALU.vf
// /___/   /\     Timestamp : 10/16/2017 15:18:19
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath F:/MyProgramme/0arch/PCPU/ipcore_dir -intstyle ise -family kintex7 -verilog F:/MyProgramme/0arch/PCPU/MUL_ALU.vf -w F:/MyProgramme/0arch/PCPU/MUL_ALU.sch
//Design Name: MUL_ALU
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module MUL_ALU(clk, 
               MUL_ID_A, 
               MUL_ID_add_sub, 
               MUL_ID_B, 
               MUL_ID_data, 
               MUL_ID_en_c, 
               MUL_ID_EXE_rst, 
               MUL_ID_HiLo, 
               MUL_ID_mul, 
               MUL_ID_sign, 
               MUL_ID_we, 
               rst, 
               MUL_EWB_data_out);

    input clk;
    input [31:0] MUL_ID_A;
    input MUL_ID_add_sub;
    input [31:0] MUL_ID_B;
    input [31:0] MUL_ID_data;
    input MUL_ID_en_c;
    input MUL_ID_EXE_rst;
    input [1:0] MUL_ID_HiLo;
    input MUL_ID_mul;
    input MUL_ID_sign;
    input MUL_ID_we;
    input rst;
   output [31:0] MUL_EWB_data_out;
   
   wire [63:0] Hi_Lo;
   wire [1:0] MUL_EWB_HiLo;
   wire MUL_EWB_mul;
   wire [63:0] MUL_EWB_res;
   wire MUL_EXE_add_sub;
   wire [31:0] MUL_EXE_data;
   wire MUL_EXE_en_c;
   wire [1:0] MUL_EXE_HiLo;
   wire MUL_EXE_mul;
   wire MUL_EXE_we;
   wire VC;
   wire [63:0] XLXN_24;
   wire [63:0] XLXN_25;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_85;
   wire [31:0] XLXN_87;
   wire [31:0] XLXN_126;
   wire [63:0] XLXN_130;
   wire [63:0] XLXN_131;
   wire [31:0] XLXN_133;
   wire [31:0] XLXN_134;
   wire XLXN_136;
   
   MUX2T1_32  XLXI_16 (.I0(Hi_Lo[63:32]), 
                      .I1(Hi_Lo[31:0]), 
                      .s(MUL_EWB_HiLo[0]), 
                      .o(XLXN_126[31:0]));
   VCC  XLXI_18 (.P(VC));
   MUX2T1_32  XLXI_19 (.I0(XLXN_126[31:0]), 
                      .I1(MUL_EWB_res[31:0]), 
                      .s(MUL_EWB_mul), 
                      .o(MUL_EWB_data_out[31:0]));
   mul_adder  _Mul_adder (.A(XLXN_131[63:0]), 
                         .a_s(XLXN_39), 
                         .B(XLXN_130[63:0]), 
                         .C_(Hi_Lo[63:0]), 
                         .en_c(XLXN_38), 
                         .res(MUL_EWB_res[63:0]));
   MUL_EXE_EWB  _Mul_EXE_EWB (.clk(clk), 
                             .EN(VC), 
                             .MUL_EXE_add_sub(MUL_EXE_add_sub), 
                             .MUL_EXE_A_t(XLXN_24[63:0]), 
                             .MUL_EXE_B_t(XLXN_25[63:0]), 
                             .MUL_EXE_data(MUL_EXE_data[31:0]), 
                             .MUL_EXE_en_c(MUL_EXE_en_c), 
                             .MUL_EXE_HiLo(MUL_EXE_HiLo[1:0]), 
                             .MUL_EXE_mul(MUL_EXE_mul), 
                             .MUL_EXE_we(MUL_EXE_we), 
                             .rst(rst), 
                             .MUL_EWB_add_sub(XLXN_39), 
                             .MUL_EWB_A_t(XLXN_131[63:0]), 
                             .MUL_EWB_B_t(XLXN_130[63:0]), 
                             .MUL_EWB_data(XLXN_87[31:0]), 
                             .MUL_EWB_en_c(XLXN_38), 
                             .MUL_EWB_HiLo(MUL_EWB_HiLo[1:0]), 
                             .MUL_EWB_mul(MUL_EWB_mul), 
                             .MUL_EWB_we(XLXN_85));
   MUL_ID_EXE  _MUL_ID_EXE (.clk(clk), 
                           .EN(VC), 
                           .MUL_ID_A(MUL_ID_A[31:0]), 
                           .MUL_ID_add_sub(MUL_ID_add_sub), 
                           .MUL_ID_B(MUL_ID_B[31:0]), 
                           .MUL_ID_data(MUL_ID_data[31:0]), 
                           .MUL_ID_en_c(MUL_ID_en_c), 
                           .MUL_ID_HiLo(MUL_ID_HiLo[1:0]), 
                           .MUL_ID_mul(MUL_ID_mul), 
                           .MUL_ID_sign(MUL_ID_sign), 
                           .MUL_ID_we(MUL_ID_we), 
                           .rst(MUL_ID_EXE_rst), 
                           .MUL_EXE_A(XLXN_133[31:0]), 
                           .MUL_EXE_add_sub(MUL_EXE_add_sub), 
                           .MUL_EXE_B(XLXN_134[31:0]), 
                           .MUL_EXE_data(MUL_EXE_data[31:0]), 
                           .MUL_EXE_en_c(MUL_EXE_en_c), 
                           .MUL_EXE_HiLo(MUL_EXE_HiLo[1:0]), 
                           .MUL_EXE_mul(MUL_EXE_mul), 
                           .MUL_EXE_sign(XLXN_136), 
                           .MUL_EXE_we(MUL_EXE_we));
   mul32_s  _Mul32_s (.A_i(XLXN_133[31:0]), 
                     .B_i(XLXN_134[31:0]), 
                     .sign(XLXN_136), 
                     .A_t(XLXN_24[63:0]), 
                     .B_t(XLXN_25[63:0]));
   Reg_HiLo  _REG_HiLo (.cal_res(MUL_EWB_res[63:0]), 
                       .clk(clk), 
                       .data_in(XLXN_87[31:0]), 
                       .HiLo(MUL_EWB_HiLo[1:0]), 
                       .rst(rst), 
                       .we(XLXN_85), 
                       .Hi_Lo(Hi_Lo[63:0]));
endmodule
